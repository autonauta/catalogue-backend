const fs = require('fs').promises;
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');

// Importar el modelo
const GalleryImage = require('../models/GalleryImage');

const execAsync = promisify(exec);

// Configuraci√≥n de la galer√≠a
const GALLERY_CONFIG = {
  // Ruta del servidor donde se guardan las im√°genes
  SERVER_PATH: '/var/www/exodustribe.com/public_html/files/galery',
  // Ruta relativa para el frontend
  FRONTEND_PATH: 'files/galery',
  // L√≠mite m√°ximo de im√°genes
  MAX_IMAGES: 1000,
  // Configuraci√≥n de compresi√≥n WebP
  WEBP_QUALITY: 60, // Reducido de 85 a 60 para mayor compresi√≥n
  // Tama√±o m√°ximo objetivo por imagen (1MB)
  MAX_IMAGE_SIZE: 1024 * 1024, // 1MB en bytes
  // Formatos soportados
  SUPPORTED_FORMATS: ['.jpg', '.jpeg', '.png', '.webp', '.gif', '.bmp'],
  // Tama√±o m√°ximo de archivo (10MB)
  MAX_FILE_SIZE: 10 * 1024 * 1024
};

/**
 * Crear directorio de galer√≠a si no existe
 */
async function createGalleryDirectory() {
  try {
    console.log("üîç Verificando directorio de galer√≠a:", GALLERY_CONFIG.SERVER_PATH);
    await fs.access(GALLERY_CONFIG.SERVER_PATH);
    console.log("‚úÖ Directorio de galer√≠a ya existe");
    
    // Verificar permisos de escritura
    try {
      await fs.access(GALLERY_CONFIG.SERVER_PATH, fs.constants.W_OK);
      console.log("‚úÖ Permisos de escritura OK");
    } catch (writeError) {
      console.warn("‚ö†Ô∏è Sin permisos de escritura, intentando cambiar permisos...");
      try {
        await fs.chmod(GALLERY_CONFIG.SERVER_PATH, 0o755);
        console.log("‚úÖ Permisos actualizados");
      } catch (chmodError) {
        console.error("‚ùå No se pudieron cambiar los permisos:", chmodError.message);
        throw new Error("Sin permisos de escritura en el directorio de galer√≠a");
      }
    }
    
  } catch (error) {
    console.log("üìÅ Directorio no existe, creando...");
    try {
      // Crear directorio con permisos apropiados
      await fs.mkdir(GALLERY_CONFIG.SERVER_PATH, { recursive: true, mode: 0o755 });
      console.log("‚úÖ Directorio de galer√≠a creado:", GALLERY_CONFIG.SERVER_PATH);
      
      // Verificar que se cre√≥ correctamente
      await fs.access(GALLERY_CONFIG.SERVER_PATH);
      console.log("‚úÖ Directorio verificado");
      
    } catch (createError) {
      console.error("‚ùå Error al crear directorio de galer√≠a:", createError);
      console.error("‚ùå Ruta:", GALLERY_CONFIG.SERVER_PATH);
      console.error("‚ùå Error details:", createError.message);
      console.error("üí° Verifica que el usuario tenga permisos para crear directorios en:", path.dirname(GALLERY_CONFIG.SERVER_PATH));
      throw createError;
    }
  }
}

/**
 * Generar nombre √∫nico para archivo
 */
function generateUniqueFilename(originalName, format = 'webp') {
  const timestamp = Date.now();
  const random = Math.random().toString(36).substring(2, 8);
  const extension = format === 'webp' ? '.webp' : path.extname(originalName);
  return `${timestamp}_${random}${extension}`;
}

/**
 * Generar thumbnail peque√±o (200x200) con compresi√≥n m√°xima
 */
async function generateThumbnail(inputPath, outputPath) {
  try {
    console.log("üñºÔ∏è Generando thumbnail...");
    console.log("üìÅ Archivo de entrada:", inputPath);
    console.log("üìÅ Archivo de salida:", outputPath);
    
    // Verificar que el archivo de entrada existe
    try {
      await fs.access(inputPath);
      console.log("‚úÖ Archivo de entrada existe");
    } catch (accessError) {
      console.error("‚ùå Archivo de entrada no encontrado:", inputPath);
      throw new Error(`Archivo de entrada no encontrado: ${inputPath}`);
    }
    
    // Generar thumbnail manteniendo proporci√≥n original (m√°ximo 200px en el lado m√°s largo)
    const command = `ffmpeg -i "${inputPath}" -vf "scale=200:200:force_original_aspect_ratio=decrease" -c:v libwebp -quality 30 -compression_level 6 -y "${outputPath}"`;
    console.log("üîß Comando FFmpeg para thumbnail:", command);
    
    const { stdout, stderr } = await execAsync(command);
    
    if (stderr && !stderr.includes('video:')) {
      console.warn("‚ö†Ô∏è Advertencias de FFmpeg:", stderr);
    }
    
    // Verificar que el archivo se cre√≥
    await fs.access(outputPath);
    
    // Obtener informaci√≥n del thumbnail
    const thumbnailInfo = await getImageInfo(outputPath);
    
    console.log("‚úÖ Thumbnail generado exitosamente");
    console.log(`üìä Tama√±o thumbnail:`, (thumbnailInfo.size / 1024).toFixed(2), "KB");
    console.log(`üìê Dimensiones: ${thumbnailInfo.width}x${thumbnailInfo.height}`);
    
    return {
      size: thumbnailInfo.size,
      dimensions: {
        width: thumbnailInfo.width,
        height: thumbnailInfo.height
      }
    };
    
  } catch (error) {
    console.error("‚ùå Error al generar thumbnail:", error);
    throw new Error(`Error al generar thumbnail: ${error.message}`);
  }
}

/**
 * Generar imagen comprimida de alta calidad manteniendo dimensiones originales
 */
async function generateHighQualityCompressed(inputPath, outputPath, originalDimensions) {
  try {
    console.log("üé® Generando imagen de alta calidad...");
    console.log("üìÅ Archivo de entrada:", inputPath);
    console.log("üìÅ Archivo de salida:", outputPath);
    console.log("üìê Dimensiones originales:", originalDimensions);
    
    // Verificar que el archivo de entrada existe
    try {
      await fs.access(inputPath);
      console.log("‚úÖ Archivo de entrada existe");
    } catch (accessError) {
      console.error("‚ùå Archivo de entrada no encontrado:", inputPath);
      throw new Error(`Archivo de entrada no encontrado: ${inputPath}`);
    }
    
    // Generar imagen de alta calidad manteniendo dimensiones originales
    const command = `ffmpeg -i "${inputPath}" -c:v libwebp -quality 85 -compression_level 4 -y "${outputPath}"`;
    console.log("üîß Comando FFmpeg para alta calidad:", command);
    
    const { stdout, stderr } = await execAsync(command);
    
    if (stderr && !stderr.includes('video:')) {
      console.warn("‚ö†Ô∏è Advertencias de FFmpeg:", stderr);
    }
    
    // Verificar que el archivo se cre√≥
    await fs.access(outputPath);
    
    // Obtener informaci√≥n de la imagen comprimida
    const compressedInfo = await getImageInfo(outputPath);
    
    console.log("‚úÖ Imagen de alta calidad generada exitosamente");
    console.log(`üìä Tama√±o:`, (compressedInfo.size / 1024).toFixed(2), "KB");
    console.log(`üìê Dimensiones: ${compressedInfo.width}x${compressedInfo.height}`);
    
    return {
      size: compressedInfo.size,
      dimensions: {
        width: compressedInfo.width,
        height: compressedInfo.height
      },
      quality: 85
    };
    
  } catch (error) {
    console.error("‚ùå Error al generar imagen de alta calidad:", error);
    throw new Error(`Error al generar imagen de alta calidad: ${error.message}`);
  }
}

/**
 * Comprimir imagen a WebP usando FFmpeg con compresi√≥n agresiva
 */
async function compressImageToWebP(inputPath, outputPath, targetSize = GALLERY_CONFIG.MAX_IMAGE_SIZE) {
  try {
    console.log("üîß Iniciando compresi√≥n agresiva de imagen...");
    console.log("üìÅ Archivo de entrada:", inputPath);
    console.log("üìÅ Archivo de salida:", outputPath);
    console.log("üéØ Tama√±o objetivo:", (targetSize / 1024).toFixed(2), "KB");
    
    // Verificar que el archivo de entrada existe
    try {
      await fs.access(inputPath);
      console.log("‚úÖ Archivo de entrada existe");
    } catch (accessError) {
      console.error("‚ùå Archivo de entrada no encontrado:", inputPath);
      throw new Error(`Archivo de entrada no encontrado: ${inputPath}`);
    }
    
    // Intentar compresi√≥n con diferentes niveles de calidad
    const qualityLevels = [60, 50, 40, 30, 20]; // Niveles de calidad de mayor a menor
    let bestResult = null;
    let bestQuality = qualityLevels[0];
    
    for (const quality of qualityLevels) {
      console.log(`üîß Probando compresi√≥n con calidad ${quality}...`);
      
      const command = `ffmpeg -i "${inputPath}" -c:v libwebp -quality ${quality} -compression_level 6 -y "${outputPath}"`;
      console.log("üîß Comando FFmpeg:", command);
      
      try {
        const { stdout, stderr } = await execAsync(command);
        
        if (stderr && !stderr.includes('video:')) {
          console.warn("‚ö†Ô∏è Advertencias de FFmpeg:", stderr);
        }
        
        // Verificar que el archivo se cre√≥
        await fs.access(outputPath);
        
        // Obtener tama√±o del archivo comprimido
        const stats = await fs.stat(outputPath);
        const compressedSize = stats.size;
        
        console.log(`üìä Tama√±o comprimido con calidad ${quality}:`, (compressedSize / 1024).toFixed(2), "KB");
        
        if (compressedSize <= targetSize) {
          console.log(`‚úÖ Objetivo alcanzado con calidad ${quality}`);
          bestResult = { quality, size: compressedSize };
          break;
        } else {
          console.log(`‚ö†Ô∏è Tama√±o a√∫n muy grande con calidad ${quality}`);
          if (!bestResult || compressedSize < bestResult.size) {
            bestResult = { quality, size: compressedSize };
            bestQuality = quality;
          }
        }
        
      } catch (cmdError) {
        console.warn(`‚ö†Ô∏è Error con calidad ${quality}:`, cmdError.message);
        continue;
      }
    }
    
    if (!bestResult) {
      throw new Error("No se pudo comprimir la imagen con ning√∫n nivel de calidad");
    }
    
    console.log(`‚úÖ Imagen comprimida exitosamente con calidad ${bestResult.quality}`);
    console.log(`üìä Tama√±o final:`, (bestResult.size / 1024).toFixed(2), "KB");
    console.log(`üìà Reducci√≥n:`, ((await fs.stat(inputPath)).size - bestResult.size) / 1024, "KB");
    
    return { quality: bestResult.quality, size: bestResult.size };
  } catch (error) {
    console.error("‚ùå Error al comprimir imagen:", error);
    console.error("‚ùå Input path:", inputPath);
    console.error("‚ùå Output path:", outputPath);
    throw new Error(`Error al comprimir imagen: ${error.message}`);
  }
}

/**
 * Obtener informaci√≥n de la imagen (dimensiones, tama√±o)
 */
async function getImageInfo(filePath) {
  try {
    const command = `ffprobe -v quiet -print_format json -show_format -show_streams "${filePath}"`;
    const { stdout } = await execAsync(command);
    const info = JSON.parse(stdout);
    
    const videoStream = info.streams.find(s => s.codec_type === 'video');
    const format = info.format;
    
    return {
      width: videoStream ? videoStream.width : 0,
      height: videoStream ? videoStream.height : 0,
      size: parseInt(format.size),
      duration: parseFloat(format.duration) || 0
    };
  } catch (error) {
    console.error("‚ùå Error al obtener informaci√≥n de imagen:", error);
    throw new Error(`Error al obtener informaci√≥n de imagen: ${error.message}`);
  }
}

/**
 * Procesar archivo de imagen subido
 */
async function processUploadedImage(file, originalSize, eventId) {
  try {
    console.log("üîÑ Procesando imagen:", file.originalname);
    
    // PRIMERO: Verificar que el archivo temporal existe
    try {
      await fs.access(file.path);
      console.log("‚úÖ Archivo temporal existe");
    } catch (accessError) {
      console.error("‚ùå Archivo temporal no encontrado:", file.path);
      throw new Error("Archivo temporal no encontrado");
    }
    
    // SEGUNDO: Verificar duplicados ANTES de procesar
    console.log("üîç Verificando duplicados...");
    const existingImage = await GalleryImage.findOne({
      original_filename: file.originalname,
      event_id: eventId
    });
    
    if (existingImage) {
      console.log("‚ö†Ô∏è Imagen duplicada encontrada:", file.originalname);
      console.log("üìÖ Imagen existente subida el:", existingImage.upload_date);
      console.log("üÜî ID de imagen existente:", existingImage._id);
      
      // Limpiar archivo temporal inmediatamente
      try {
        await fs.unlink(file.path);
        console.log("üóëÔ∏è Archivo temporal eliminado (duplicado)");
      } catch (unlinkError) {
        console.warn("‚ö†Ô∏è No se pudo eliminar archivo temporal:", unlinkError.message);
      }
      
      return {
        success: false,
        duplicate: true,
        existingImage: existingImage.getImageInfo(),
        message: `La imagen "${file.originalname}" ya existe en este evento`
      };
    }
    
    console.log("‚úÖ Imagen no duplicada, procediendo con el procesamiento");
    
    // TERCERO: Crear directorio si no existe
    console.log("üìÅ Preparando directorio de destino...");
    await createGalleryDirectory();
    
    // CUARTO: Generar nombres de archivo para las versiones
    console.log("üìù Generando nombres de archivo...");
    const originalFilename = file.originalname;
    const baseFilename = generateUniqueFilename(originalFilename, 'webp').replace('.webp', '');
    const tempPath = file.path;
    
    // Nombres para las versiones (solo thumbnail y original comprimida)
    const thumbnailFilename = `${baseFilename}_thumb.webp`;
    const originalCompressedFilename = `${baseFilename}_orig.webp`;
    
    // Rutas completas
    const thumbnailPath = path.join(GALLERY_CONFIG.SERVER_PATH, thumbnailFilename);
    const originalCompressedPath = path.join(GALLERY_CONFIG.SERVER_PATH, originalCompressedFilename);
    
    console.log("üìÅ Archivo temporal:", tempPath);
    console.log("üìÅ Thumbnail:", thumbnailPath);
    console.log("üìÅ Original comprimida:", originalCompressedPath);
    
    // QUINTO: Obtener informaci√≥n de la imagen original
    console.log("üìä Obteniendo informaci√≥n de imagen original...");
    const originalImageInfo = await getImageInfo(tempPath);
    console.log("üìê Dimensiones originales:", originalImageInfo);
    
    // SEXTO: Generar las dos versiones en paralelo
    console.log("üöÄ Generando versiones...");
    const [thumbnailResult, originalCompressedResult] = await Promise.all([
      generateThumbnail(tempPath, thumbnailPath),
      generateHighQualityCompressed(tempPath, originalCompressedPath, originalImageInfo)
    ]);
    
    console.log("‚úÖ Versiones generadas exitosamente");
    
    // Calcular ratio de compresi√≥n (usando la versi√≥n original comprimida como referencia)
    const compressionRatio = originalSize > 0 ? 
      ((originalSize - originalCompressedResult.size) / originalSize) * 100 : 0;
    
    // Limpiar archivo temporal
    try {
      await fs.unlink(tempPath);
      console.log("üóëÔ∏è Archivo temporal eliminado");
    } catch (unlinkError) {
      console.warn("‚ö†Ô∏è No se pudo eliminar archivo temporal:", unlinkError.message);
    }
    
    // Crear registro en base de datos
    const galleryImage = new GalleryImage({
      filename: originalCompressedFilename, // Usar la versi√≥n original comprimida como principal
      path: path.join(GALLERY_CONFIG.FRONTEND_PATH, originalCompressedFilename),
      versions: {
        thumbnail: {
          filename: thumbnailFilename,
          path: path.join(GALLERY_CONFIG.FRONTEND_PATH, thumbnailFilename),
          size: thumbnailResult.size,
          dimensions: thumbnailResult.dimensions
        },
        original_compressed: {
          filename: originalCompressedFilename,
          path: path.join(GALLERY_CONFIG.FRONTEND_PATH, originalCompressedFilename),
          size: originalCompressedResult.size,
          dimensions: originalCompressedResult.dimensions,
          quality: originalCompressedResult.quality
        }
      },
      original_filename: originalFilename,
      file_size: originalCompressedResult.size, // Tama√±o de la versi√≥n original comprimida
      original_size: originalSize,
      compression_ratio: compressionRatio,
      dimensions: originalCompressedResult.dimensions,
      format: 'webp',
      quality: originalCompressedResult.quality,
      is_compressed: true,
      event_id: eventId
    });
    
    await galleryImage.save();
    console.log("‚úÖ Imagen guardada en base de datos:", galleryImage._id);
    console.log("üéâ Procesamiento completado exitosamente");
    
    return {
      success: true,
      image: galleryImage,
      info: {
        originalSize: originalSize,
        thumbnailSize: thumbnailResult.size,
        originalCompressedSize: originalCompressedResult.size,
        compressionRatio: compressionRatio,
        dimensions: {
          original: originalImageInfo,
          thumbnail: thumbnailResult.dimensions,
          originalCompressed: originalCompressedResult.dimensions
        }
      }
    };
    
  } catch (error) {
    console.error("‚ùå Error al procesar imagen:", error);
    
    // Limpiar archivos en caso de error
    try {
      if (file.path) await fs.unlink(file.path);
    } catch (cleanupError) {
      console.warn("‚ö†Ô∏è Error al limpiar archivos:", cleanupError.message);
    }
    
    throw error;
  }
}

/**
 * Limpiar im√°genes antiguas cuando se excede el l√≠mite
 */
async function cleanupOldImages() {
  try {
    console.log("üßπ Iniciando limpieza de im√°genes antiguas...");
    
    const imagesToDelete = await GalleryImage.cleanupOldImages(GALLERY_CONFIG.MAX_IMAGES);
    
    if (imagesToDelete.length === 0) {
      console.log("‚úÖ No hay im√°genes para limpiar");
      return { deleted: 0, files: [] };
    }
    
    console.log(`üóëÔ∏è Eliminando ${imagesToDelete.length} im√°genes antiguas...`);
    
    const deletedFiles = [];
    
    for (const image of imagesToDelete) {
      try {
        // Eliminar todos los archivos f√≠sicos (todas las versiones)
        const filesToDelete = [];
        
        // Archivo principal
        if (image.filename) {
          filesToDelete.push(path.join(GALLERY_CONFIG.SERVER_PATH, image.filename));
        }
        
        // Archivos de versiones
        if (image.versions) {
          if (image.versions.thumbnail && image.versions.thumbnail.filename) {
            filesToDelete.push(path.join(GALLERY_CONFIG.SERVER_PATH, image.versions.thumbnail.filename));
          }
          if (image.versions.original_compressed && image.versions.original_compressed.filename) {
            filesToDelete.push(path.join(GALLERY_CONFIG.SERVER_PATH, image.versions.original_compressed.filename));
          }
        }
        
        // Eliminar cada archivo
        for (const filePath of filesToDelete) {
          try {
            await fs.unlink(filePath);
            console.log("üóëÔ∏è Archivo eliminado:", path.basename(filePath));
          } catch (unlinkError) {
            console.warn("‚ö†Ô∏è No se pudo eliminar archivo:", path.basename(filePath), unlinkError.message);
          }
        }
        
        // Eliminar registro de base de datos
        await GalleryImage.findByIdAndDelete(image._id);
        console.log("üóëÔ∏è Registro eliminado:", image._id);
        
        deletedFiles.push({
          id: image._id,
          filename: image.filename,
          path: image.path,
          filesDeleted: filesToDelete.length
        });
        
      } catch (deleteError) {
        console.error("‚ùå Error al eliminar imagen:", image.filename, deleteError.message);
      }
    }
    
    console.log(`‚úÖ Limpieza completada: ${deletedFiles.length} im√°genes eliminadas`);
    
    return {
      deleted: deletedFiles.length,
      files: deletedFiles
    };
    
  } catch (error) {
    console.error("‚ùå Error durante limpieza:", error);
    throw error;
  }
}

/**
 * Obtener todas las im√°genes de la galer√≠a
 */
async function getAllGalleryImages(limit = null, skip = 0, eventId = null) {
  try {
    console.log("üì∏ Obteniendo im√°genes de la galer√≠a...");
    
    let query = GalleryImage.find();
    
    // Filtrar por evento si se especifica
    if (eventId) {
      query = query.where({ event_id: eventId });
      console.log("üîç Filtrando por evento:", eventId);
    }
    
    query = query.sort({ upload_date: -1 });
    
    if (limit) {
      query = query.limit(limit);
    }
    
    if (skip > 0) {
      query = query.skip(skip);
    }
    
    const images = await query.exec();
    
    console.log(`‚úÖ ${images.length} im√°genes encontradas`);
    
    return images.map(image => image.getImageInfo());
    
  } catch (error) {
    console.error("‚ùå Error al obtener im√°genes:", error);
    throw error;
  }
}

/**
 * Obtener estad√≠sticas de la galer√≠a
 */
async function getGalleryStats() {
  try {
    const totalImages = await GalleryImage.countDocuments();
    const totalSize = await GalleryImage.aggregate([
      { $group: { _id: null, totalSize: { $sum: "$file_size" } } }
    ]);
    
    const formatStats = await GalleryImage.aggregate([
      { $group: { _id: "$format", count: { $sum: 1 } } }
    ]);
    
    const avgCompression = await GalleryImage.aggregate([
      { $group: { _id: null, avgCompression: { $avg: "$compression_ratio" } } }
    ]);
    
    return {
      totalImages,
      maxImages: GALLERY_CONFIG.MAX_IMAGES,
      remainingSlots: Math.max(0, GALLERY_CONFIG.MAX_IMAGES - totalImages),
      totalSize: totalSize[0]?.totalSize || 0,
      formatDistribution: formatStats,
      averageCompression: avgCompression[0]?.avgCompression || 0
    };
    
  } catch (error) {
    console.error("‚ùå Error al obtener estad√≠sticas:", error);
    throw error;
  }
}

/**
 * Eliminar todas las im√°genes de la galer√≠a
 */
async function deleteAllGalleryImages() {
  try {
    console.log("üóëÔ∏è Eliminando todas las im√°genes de la galer√≠a...");
    
    // Obtener todas las im√°genes
    const allImages = await GalleryImage.find({});
    
    if (allImages.length === 0) {
      console.log("‚úÖ No hay im√°genes para eliminar");
      return {
        success: true,
        deleted: 0,
        files: [],
        message: "No hab√≠a im√°genes en la galer√≠a"
      };
    }
    
    console.log(`üóëÔ∏è Eliminando ${allImages.length} im√°genes...`);
    
    const deletedFiles = [];
    let successCount = 0;
    let errorCount = 0;
    
    for (const image of allImages) {
      try {
        // Eliminar todos los archivos f√≠sicos (todas las versiones)
        const filesToDelete = [];
        
        // Archivo principal
        if (image.filename) {
          filesToDelete.push(path.join(GALLERY_CONFIG.SERVER_PATH, image.filename));
        }
        
        // Archivos de versiones
        if (image.versions) {
          if (image.versions.thumbnail && image.versions.thumbnail.filename) {
            filesToDelete.push(path.join(GALLERY_CONFIG.SERVER_PATH, image.versions.thumbnail.filename));
          }
          if (image.versions.original_compressed && image.versions.original_compressed.filename) {
            filesToDelete.push(path.join(GALLERY_CONFIG.SERVER_PATH, image.versions.original_compressed.filename));
          }
        }
        
        // Eliminar cada archivo
        const imageDeletedFiles = [];
        for (const filePath of filesToDelete) {
          try {
            await fs.unlink(filePath);
            imageDeletedFiles.push(path.basename(filePath));
            console.log("üóëÔ∏è Archivo eliminado:", path.basename(filePath));
          } catch (unlinkError) {
            console.warn("‚ö†Ô∏è No se pudo eliminar archivo:", path.basename(filePath), unlinkError.message);
          }
        }
        
        // Eliminar registro de base de datos
        await GalleryImage.findByIdAndDelete(image._id);
        console.log("üóëÔ∏è Registro eliminado:", image._id);
        
        deletedFiles.push({
          id: image._id,
          filename: image.filename,
          path: image.path,
          filesDeleted: imageDeletedFiles,
          totalFiles: filesToDelete.length
        });
        
        successCount++;
        
      } catch (deleteError) {
        console.error("‚ùå Error al eliminar imagen:", image.filename, deleteError.message);
        errorCount++;
      }
    }
    
    console.log(`‚úÖ Eliminaci√≥n completada: ${successCount} im√°genes eliminadas exitosamente, ${errorCount} errores`);
    
    return {
      success: true,
      deleted: successCount,
      errors: errorCount,
      files: deletedFiles,
      message: `Eliminadas ${successCount} im√°genes exitosamente, ${errorCount} errores`
    };
    
  } catch (error) {
    console.error("‚ùå Error al eliminar todas las im√°genes:", error);
    throw error;
  }
}

/**
 * Eliminar imagen espec√≠fica
 */
async function deleteGalleryImage(imageId) {
  try {
    const image = await GalleryImage.findById(imageId);
    if (!image) {
      throw new Error("Imagen no encontrada");
    }
    
    // Eliminar todos los archivos f√≠sicos (todas las versiones)
    const filesToDelete = [];
    
    // Archivo principal
    if (image.filename) {
      filesToDelete.push(path.join(GALLERY_CONFIG.SERVER_PATH, image.filename));
    }
    
    // Archivos de versiones
    if (image.versions) {
      if (image.versions.thumbnail && image.versions.thumbnail.filename) {
        filesToDelete.push(path.join(GALLERY_CONFIG.SERVER_PATH, image.versions.thumbnail.filename));
      }
      if (image.versions.original_compressed && image.versions.original_compressed.filename) {
        filesToDelete.push(path.join(GALLERY_CONFIG.SERVER_PATH, image.versions.original_compressed.filename));
      }
    }
    
    // Eliminar cada archivo
    const deletedFiles = [];
    for (const filePath of filesToDelete) {
      try {
        await fs.unlink(filePath);
        deletedFiles.push(path.basename(filePath));
        console.log("üóëÔ∏è Archivo eliminado:", path.basename(filePath));
      } catch (unlinkError) {
        console.warn("‚ö†Ô∏è No se pudo eliminar archivo:", path.basename(filePath), unlinkError.message);
      }
    }
    
    // Eliminar registro de base de datos
    await GalleryImage.findByIdAndDelete(imageId);
    
    console.log("‚úÖ Imagen eliminada:", image.filename);
    console.log(`üóëÔ∏è Archivos eliminados: ${deletedFiles.length}/${filesToDelete.length}`);
    
    return {
      success: true,
      deletedImage: image.getImageInfo(),
      deletedFiles: deletedFiles,
      totalFiles: filesToDelete.length
    };
    
  } catch (error) {
    console.error("‚ùå Error al eliminar imagen:", error);
    throw error;
  }
}

module.exports = {
  GALLERY_CONFIG,
  createGalleryDirectory,
  processUploadedImage,
  cleanupOldImages,
  getAllGalleryImages,
  getGalleryStats,
  deleteGalleryImage,
  deleteAllGalleryImages,
  generateUniqueFilename,
  compressImageToWebP,
  generateThumbnail,
  generateHighQualityCompressed,
  getImageInfo
};
